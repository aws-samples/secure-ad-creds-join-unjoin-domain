{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template to configure an environment for adding/removing EC2 Instances from an Active Directory Domain",
    "Parameters": {
        "ADUSECASE": {
            "Description": "Select your requirement as per the values in the dropdown",
            "Type": "String",
            "AllowedValues": [
                "onlydomainjoin",
                "onlydomainunjoin",
                "bothdomainjoinunjoin"
            ]
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t3.large",
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "VPC": {
            "Description": "Existing VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        },
        "Subnet": {
            "Description": "Select a subnet you want to lauch the Instance in",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "SecurityGroupId": {
            "Description": "Security groups that can be used to control ingress/outgress traffic for the worker",
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "ConstraintDescription": "must be list of EC2 security group ids"
        },
        "DenyPolicyName": {
            "Description": "The name of the managed deny policy for users/groups to deny any actions on the EC2 Instance and EC2 IAM role",
            "Type": "String",
            "Default": "EXPLICITDENYPOLICY"
        },
        "AdminUserId": {
            "Description": "The canonical user ID of the IAM User who will manage the AD credentials stored in AWS Secrets Manager",
            "Type": "String"
        },
        "S3Bucket": {
            "Description": "The name of the bucket that contains your packaged source",
            "Type": "String",
            "Default": "my-custom-resource"
        },
        "S3prefix": {
            "Description": "The path in the S3 bucket that contains the scripts",
            "Type": "String",
            "Default": "adscripts"
        },
        "Placeholder": {
            "Description": "A dummy Instance id , leave this default",
            "Type": "String",
            "Default": "i-xxxxx"
        },
        "SSHKeyRequired": {
            "Description": "Select true or false based on whether you use an SSH key to login to the worker Instance",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "Select either true or false"
        },
        "WorkerSSHKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH/RDP access to the worker and AD tools instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        }
    },
    "Conditions": {
        "SSHKeyCheck": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        "false",
                        {
                            "Ref": "SSHKeyRequired"
                        }
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "UseCase": {
            "Key01": {
                "onlydomainjoin": [
                    "running"
                ],
                "onlydomainunjoin": [
                    "terminated"
                ],
                "bothdomainjoinunjoin": [
                    "running",
                    "terminated"
                ]
            }
        }
    },
    "Resources": {
        "MyLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "DependsOn": [
                "EC2Endpoint",
                "SQSEndpoint",
                "CloudwatchLogsEndpoint",
                "SecretManagerEndpoint"
            ],
            "Properties": {
                "LaunchTemplateData": {
                    "InstanceType": {
                        "Ref": "InstanceType"
                    },
                    "DisableApiTermination": "true",
                    "KeyName": {
                        "Fn::If": [
                            "SSHKeyCheck",
                            {
                                "Ref": "WorkerSSHKeyName"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "ImageId": {
                        "Fn::GetAtt": [
                            "AMIInfo",
                            "Id"
                        ]
                    },
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "RootInstanceProfile",
                                "Arn"
                            ]
                        }
                    },
                    "SecurityGroupIds": {
                        "Ref": "SecurityGroupId"
                    },
                    "TagSpecifications": [
                        {
                            "ResourceType": "instance",
                            "Tags": [
                                {
                                    "Key": "Name",
                                    "Value": "adjoin-worker-instance"
                                }
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "<powershell>\n",
                                    "mkdir 'C:\\ad-join-unjoin-solution' \n",
                                    "mkdir 'C:\\ad-join-unjoin-solution\\adlog' \n",
                                    "mkdir 'C:\\ad-join-unjoin-solution\\adscripts' \n",
                                    "mkdir 'C:\\ad-join-unjoin-solution\\config' \n",
                                    "mkdir 'C:\\ad-join-unjoin-solution\\adtemp' \n",
                                    "echo '{\n",
                                    "\"SQSQUEUE\": \"",
                                    {
                                        "Ref": "MySQSQueue"
                                    },
                                    "\",",
                                    "\n",
                                    "\"S3BUCKETNAME\": \"",
                                    {
                                        "Ref": "S3Bucket"
                                    },
                                    "\",",
                                    "\n",
                                    "\"S3PREFIX\": \"",
                                    {
                                        "Ref": "S3prefix"
                                    },
                                    "\",",
                                    "\n",
                                    "\"SSHSECRETKEY\": \"",
                                    "adsshkey",
                                    "\",",
                                    "\n",
                                    "\"ADSECRETKEY\": \"",
                                    {
                                        "Ref": "ADSecret"
                                    },
                                    "\",",
                                    "\n",
                                    "\"ADUSECASE\": \"",
                                    {
                                        "Ref": "ADUSECASE"
                                    },
                                    "\",",
                                    "\n",
                                    "\"EC2ENDPOINT\": \"",
                                    "https://",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "EC2Endpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "\",",
                                    "\n",
                                    "\"DDBTABLE\": \"",
                                    {
                                        "Ref": "instancehostnamemappingtable"
                                    },
                                    "\",",
                                    "\n",
                                    "\"SQSENDPOINT\": \"",
                                    "https://",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "SQSEndpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "\",",
                                    "\n",
                                    "\"LOGSENDPOINT\": \"",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "CloudwatchLogsEndpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "\",",
                                    "\n",
                                    "\"SECRETMANAGERENDPOINT\": \"",
                                    "https://",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "SecretManagerEndpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "\",",
                                    "\n",
                                    "\"DEADLETTERQUEUE\": \"",
                                    {
                                        "Ref": "MyDLSQSQueue"
                                    },
                                    "\"",
                                    "\n",
                                    "}' > 'C:\\ad-join-unjoin-solution\\config\\sqsworker.conf' \n",
                                    "#sleep 60 \n",
                                    "$metadata = 'http://169.254.169.254/latest/meta-data/network/interfaces/macs' \n",
                                    "$Interface = Invoke-WebRequest -Uri  $metadata// | Select-Object Content | foreach { $_.Content } \n",
                                    "$region = (Invoke-WebRequest -UseBasicParsing -Uri http://169.254.169.254/latest/dynamic/instance-identity/document | ConvertFrom-Json | Select region).region \n",
                                    "$subnetid = Invoke-WebRequest -Uri  $metadata//$Interface//subnet-id | Select-Object Content | foreach { $_.Content } \n",
                                    "$vpcid = Invoke-WebRequest -Uri  $metadata//$Interface//vpc-id | Select-Object Content | foreach { $_.Content } \n",
                                    "$routetableId = Get-EC2RouteTable -Region $region -EndpointUrl ",
                                    "https://",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "EC2Endpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    " -Filter @{ Name='association.subnet-id'; Value=$subnetid } | Select-Object RouteTableId  | foreach { $_.RouteTableId }",
                                    "\n",
                                    "$checkS3endpoint = Get-EC2VpcEndpoint -Region $region -EndpointUrl ",
                                    "https://",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "EC2Endpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    " | select-object ServiceName, VpcId  | Select-String -Pattern 's3' | Select-String $vpcid",
                                    "\n",
                                    "New-EC2VpcEndpoint -EndpointUrl ",
                                    "https://",
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Fn::Split": [
                                                    ":",
                                                    {
                                                        "Fn::Select": [
                                                            "0",
                                                            {
                                                                "Fn::GetAtt": [
                                                                    "EC2Endpoint",
                                                                    "DnsEntries"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    " -Region $region  -ServiceName com.amazonaws.$region.s3 -VpcId $vpcid  -RouteTableId $routetableid",
                                    "\n",
                                    "sleep 30 \n",
                                    "Copy-S3Object -BucketName ",
                                    {
                                        "Ref": "S3Bucket"
                                    },
                                    " -KeyPrefix ",
                                    {
                                        "Ref": "S3prefix"
                                    },
                                    " -Localfolder 'C:\\ad-join-unjoin-solution\\adscripts'",
                                    "\n",
                                    "Copy-S3Object -BucketName ",
                                    {
                                        "Ref": "S3Bucket"
                                    },
                                    " -KeyPrefix config -Localfolder 'C:\\ad-join-unjoin-solution\\config'",
                                    "\n",
                                    "powershell.exe -Command 'C:\\ad-join-unjoin-solution\\adscripts\\userdata.ps1'  \n",
                                    "</powershell>"
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "workeradautoscalingV1": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "MyLaunchTemplate",
            "Properties": {
                "NotificationConfigurations": [
                    {
                        "TopicARN": {
                            "Ref": "NotificationTopic"
                        },
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH"
                        ]
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "MyLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "MyLaunchTemplate",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": "1"
            }
        },
        "AdminRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ec2adminpolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "*",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "AdminRole"
                    }
                ]
            }
        },
        "RootInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "AdminRole"
                    }
                ]
            }
        },
        "mysceretrolepolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "ec2secretpolicy-${AWS::StackName}"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Deny",
                            "Resource": "*",
                            "Condition": {
                                "StringNotLike": {
                                    "aws:userid": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "AdminRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "Placeholder"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "AdminUserId"
                                        },
                                        {
                                            "Fn::Sub": "${AWS::AccountId}"
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    "UpdatePoliciesLambdaV1"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            },
                            "Action": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "AdminRole"
                    }
                ]
            }
        },
        "DENYPOLICY": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "ManagedPolicyName": {
                    "Ref": "DenyPolicyName"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Deny",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "AdminRole",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Sub": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/i-xxxx"
                                },
                                {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/${DenyPolicyName}"
                                }
                            ],
                            "Condition": {
                                "StringNotLike": {
                                    "aws:userid": [
                                        {
                                            "Ref": "AdminUserId"
                                        },
                                        {
                                            "Fn::Sub": "${AWS::AccountId}"
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    "UpdatePoliciesLambdaV1"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            },
                            "Action": "*"
                        }
                    ]
                }
            }
        },
        "AMIInfo": {
            "Type": "Custom::AMIInfo",
            "DependsOn": "IAMLambdaPolicy",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AMIInfoFunction",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "OSName": "Windows Server 2016 English Full-Base 64-bit"
            }
        },
        "AMIInfoFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "S3Bucket"
                    },
                    "S3Key": "lambda/amilookup.zip"
                },
                "Handler": "amilookup.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": "30"
            }
        },
        "SQSEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.sqs"
                },
                "SubnetIds": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "VPCEndpointSG"
                    }
                ],
                "PrivateDnsEnabled": true
            }
        },
        "CloudwatchLogsEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.logs"
                },
                "SubnetIds": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "VPCEndpointSG"
                    }
                ],
                "PrivateDnsEnabled": true
            }
        },
        "SecretManagerEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.secretsmanager"
                },
                "SubnetIds": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "VPCEndpointSG"
                    }
                ],
                "PrivateDnsEnabled": true
            }
        },
        "EC2Endpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ec2"
                },
                "SubnetIds": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "VPCEndpointSG"
                    }
                ],
                "PrivateDnsEnabled": true
            }
        },
        "VPCEndpointSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow traffic to and from VOC endpoint interfaces",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "SourceSecurityGroupId": {
                            "Fn::Select": [
                                "0",
                                {
                                    "Ref": "SecurityGroupId"
                                }
                            ]
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "PushEC2detailtoSQSLambdaV1": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "S3Bucket"
                    },
                    "S3Key": "lambda/send-ec2-details-to-sqs.zip"
                },
                "Handler": "send-ec2-details-to-sqs.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.7",
                "Timeout": "7",
                "Environment": {
                    "Variables": {
                        "INSTANCE_TAG_VALUE": "true",
                        "INSTANCE_AD_TAG": "JoinAD",
                        "QUEUE_NAME": {
                            "Fn::GetAtt": [
                                "MySQSQueue",
                                "QueueName"
                            ]
                        }
                    }
                }
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "IAMLambdaPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "DependsOn": "LambdaExecutionRole",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "arn:aws:logs:*:*:*"
                        },
                        {
                            "Effect": "Deny",
                            "Action": "*",
                            "Resource": "*",
                            "Condition": {
                                "StringNotLike": {
                                    "aws:userid": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "UpdatePoliciesLambdaV1"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "AMIInfoFunction"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "PushEC2detailtoSQSLambdaV1"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Sub": "${AWS::AccountId}"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:*"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "MySQSQueue",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:*",
                                "s3:*",
                                "secretsmanager:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeImages",
                                "ec2:DescribeInstances"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "LambdaExecutionRole"
                    }
                ]
            }
        },
        "MySQSQueue": {
            "Type": "AWS::SQS::Queue",
			"Properties": {
			   "VisibilityTimeout" : 300
			}
        },
        "MyDLSQSQueue": {
            "Type": "AWS::SQS::Queue"
        },
        "instancehostnamemappingtable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "INSTANCEID",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "INSTANCEID",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                }
            }
        },
        "EventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "EventRule",
                "EventPattern": {
                    "source": [
                        "aws.ec2"
                    ],
                    "detail-type": [
                        "EC2 Instance State-change Notification"
                    ],
                    "detail": {
                        "state": {
                            "Fn::FindInMap": [
                                "UseCase",
                                "Key01",
                                {
                                    "Ref": "ADUSECASE"
                                }
                            ]
                        }
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "PushEC2detailtoSQSLambdaV1",
                                "Arn"
                            ]
                        },
                        "Id": {
                            "Ref": "PushEC2detailtoSQSLambdaV1"
                        }
                    }
                ]
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "PushEC2detailtoSQSLambdaV1"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "EventRule",
                        "Arn"
                    ]
                }
            }
        },
        "SNSLambdaInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdatePoliciesLambdaV1"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "NotificationTopic"
                }
            }
        },
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "UpdatePoliciesLambdaV1",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            },
            "DependsOn": "UpdatePoliciesLambdaV1"
        },
        "UpdatePoliciesLambdaV1": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "S3Bucket"
                    },
                    "S3Key": "lambda/update-policies.zip"
                },
                "FunctionName": "UpdatePoliciesLambdaV1",
                "Handler": "update-policies.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.7",
                "Environment": {
                    "Variables": {
                        "IAM_EC2_ROLE": {
                            "Ref": "AdminRole"
                        },
                        "IAM_POLICY": {
                            "Fn::Sub": "ec2secretpolicy-${AWS::StackName}"
                        },
                        "SECRET_NAME": {
                            "Ref": "ADSecret"
                        },
                        "MANAGED_POLICY_ARN": {
                            "Ref": "DENYPOLICY"
                        },
                        "S3_BUCKET": {
                            "Ref": "S3Bucket"
                        }
                    }
                },
                "Timeout": 15
            }
        },
        "ADSecret": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "This secret has a dynamically generated secret password.",
                "GenerateSecretString": {
                    "SecretStringTemplate": "{\"domain_user\":\"admin\",\"domain_name\":\"EXAMPLE.COM\",\"domain_password\":\"dummypass\",\"directory_ou\":\"\"}",
                    "GenerateStringKey": "instance_password",
                    "PasswordLength": 15,
                    "ExcludeCharacters": "\"@/\\"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "secret-adcred"
                    }
                ]
            }
        },
        "ADSecretResourcePolicy": {
            "Type": "AWS::SecretsManager::ResourcePolicy",
            "Properties": {
                "SecretId": {
                    "Ref": "ADSecret"
                },
                "ResourcePolicy": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Resource": "*",
                            "Action": "secretsmanager:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Condition": {
                                "StringNotLike": {
                                    "aws:userid": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "AdminRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "Placeholder"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Sub": "${AWS::AccountId}"
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "UpdatePoliciesLambdaV1"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "AdminUserId"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "SecureBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "S3Bucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Deny",
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:s3:::${S3Bucket}"
                                },
                                {
                                    "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*"
                                }
                            ],
                            "Principal": "*",
                            "Condition": {
                                "StringNotLike": {
                                    "aws:userid": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "AdminRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "Placeholder"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "AdminUserId"
                                        },
                                        {
                                            "Fn::Sub": "${AWS::AccountId}"
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "LambdaExecutionRole",
                                                            "RoleId"
                                                        ]
                                                    },
                                                    "UpdatePoliciesLambdaV1"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        }
    },
    "Outputs": {
        "AMIID": {
            "Description": "The Amazon EC2 instance AMI ID.",
            "Value": {
                "Fn::GetAtt": [
                    "AMIInfo",
                    "Id"
                ]
            }
        },
        "ADSecret": {
            "Description": "The name of Secret key to store AD credentials",
            "Value": {
                "Ref": "ADSecret"
            }
        },
        "EC2VPCEndPoint": {
            "Description": "DNS name for EC2 VPC endpoint",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            ":",
                            {
                                "Fn::Select": [
                                    "0",
                                    {
                                        "Fn::GetAtt": [
                                            "EC2Endpoint",
                                            "DnsEntries"
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        }
    }
}