{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template to configure an environment for securely passing AD credentials to Instances that needs to join and unjoin an AD domain",

"Parameters": {
    "InstanceType": {
        "Description": "EC2 instance type",
        "Type": "String",
        "Default": "t2.small",
        "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "SSHKeyRequired": {
        "Description": "Select true or false based on whether you use an SSH key to login to the worker Instance",
        "Type": "String",
        "AllowedValues": [
            "true",
            "false"
        ],
        "ConstraintDescription": "Select either true or false"
    },
    "WorkerKeyName": {
        "Description": "Name of an existing EC2 KeyPair to enable SSH/RDP access to the worker and AD tools instance",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "VPC": {
        "Description": "Existing VPC ID",
        "Type": "AWS::EC2::VPC::Id"
    },
    "Subnet": {
        "Description": "Select a subnet you want to lauch the Instance in",
        "Type": "AWS::EC2::Subnet::Id"
    },
    "SecurityGroupId": {
        "Description": "Security groups that can be used to control ingress/outgress traffic for the worker",
        "Type": "List<AWS::EC2::SecurityGroup::Id>",
        "ConstraintDescription": "must be list of EC2 security group ids"
    },
    "DenyPolicyName": {
        "Description": "The name of the managed deny policy for users/groups to deny any actions on the EC2 Instance and IAM role",
        "Type": "String",
        "Default": "EXPLICITDENYPOLICY"
    },
    "AdminUserId": {
        "Description": "The canonical user ID of the IAM User who will manage the AD credentials stored in AWS Secrets Manager",
        "Type": "String"
    },
    "S3Bucket": {
        "Description": "The name of the bucket that contains your packaged source",
        "Type": "String",
        "Default": "my-custom-resource"
    },
    "S3prefix": {
        "Description": "The path in the S3 bucket that contains the scripts",
        "Type": "String",
        "Default": "myscripts"
    },
    "SQSQueueName": {
        "Description": "The name of the SQS queue where a new EC2 will post a message",
        "Type": "String",
        "Default": "myadqueue"
    },
    "Placeholder": {
        "Description": "A dummy Instance id , leave this default",
        "Type": "String",
        "Default": "i-xxxxx"
    }
},
  "Conditions": {
    "SSHKeyCheck": {"Fn::Not": [{"Fn::Equals": ["false", {"Ref": "SSHKeyRequired"}]}]}
  },
  "Resources" : {
     "MyLaunchTemplate": {
	"Type": "AWS::EC2::LaunchTemplate",
    "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install required dependencies",
        "Comment2" : "placeholder",
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "Install", "Configure" ]
          },

          "Install" : {

            "files" : {
					  "c:\\cfn\\cfn-hup.conf" : {
						"content" : { "Fn::Join" : ["", [
						  "[main]\n",
						  "interval=5\n",
						  "stack=", { "Ref" : "AWS::StackName" }, "\n",
						  "region=", { "Ref" : "AWS::Region" }, "\n"
						  ]]}
					  },
					  "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
						"content": { "Fn::Join" : ["", [
						  "[cfn-auto-reloader-hook]\n",
						  "triggers=post.update\n",
						  "path=Resources.MyLaunchTemplate.Metadata.AWS::CloudFormation::Init\n",
						  "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackName" },
						 " -r MyLaunchTemplate",
						 " -c InstallAndRun",
						 " --region ", { "Ref" : "AWS::Region" }, "\n"
						]]}
					  },
					  "C:\\scripts\\sqsworker.conf" : {
									"content" : { "Fn::Join" : ["", [
									  "{\n",
									  "\"CLOUDWATCHLOGSGROUP\": \"" , { "Ref" : "myLogGroup" } , "\"," , "\n",
									  "\"SQSQUEUE\": \"" , { "Ref" : "MySQSQueue" }, "\"," , "\n",
									  "\"S3BUCKETNAME\": \"" , { "Ref" : "S3Bucket" }, "\"," , "\n",
									  "\"S3PREFIX\": \"" , { "Ref" : "S3prefix" }, "\"," , "\n",
									  "\"SSHKEYNAME\": \"" , "dummy.pem" , "\"," , "\n",
									  "\"DDBTABLE\": \"" , { "Ref" : "instancehostnamemappingtable" }, "\"," , "\n",
									  "\"DLSQSQUEUE\": \"" , { "Ref" : "MyDLSQSQueue" },  "\"" , "\n",
									  "}\n"
									]]}
								  }
  			  
                    },
					"services" : {
					  "windows" : {
						"cfn-hup" : {
						  "enabled" : "true",
						  "ensureRunning" : "true",
						  "files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
						}
					  }
					}
          },
          "Configure" : {
			"commands" : {
			      "1-clean_up" : {
					"command" : {"Fn::Sub": "powershell.exe -ExecutionPolicy RemoteSigned -Command cd 'C:\\Program Files\\Amazon\\AWSCLIV2' ; aws.exe s3 cp s3://${S3Bucket}/${S3prefix}/cleanup.ps1 C:\\ ; C:\\cleanup.ps1" },
					"waitAfterCompletion": "2"
                   },
				   
				   "2-copy_scripts" : {
					"command" : {"Fn::Sub": "powershell.exe -ExecutionPolicy RemoteSigned -Command cd 'C:\\Program Files\\Amazon\\AWSCLIV2' ; aws.exe s3 cp s3://${S3Bucket}/${S3prefix} C:\\scripts\\ --recursive" },
					"waitAfterCompletion": "3"
					},
					
				  "3-run_script" : {
				    "command":  "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\scripts\\userdata.sh",
					"waitAfterCompletion": "5"
					},
				  "6-signal-cfn" : {
					"command": {
					  "Fn::Join": [
						"",
						[
						  "cfn-signal.exe -e %ERRORLEVEL% --resource workeradautoscalingV1 --stack ",
						  {
							"Ref": "AWS::StackName"
						  },
						  "         --region ",
						  {
							"Ref": "AWS::Region"
						  }
						]]}
                  }
          }
          }
		}  
        },
	"Properties": {
	    "LaunchTemplateName" : "ad-worker-launch-template",
		"LaunchTemplateData" : {
			"InstanceType"   : { "Ref" : "InstanceType" },
			"DisableApiTermination" : "true",
			"KeyName" : {
				  "Fn::If" : [
					"SSHKeyCheck",
					{"Ref" : "WorkerKeyName"},
					{"Ref" : "AWS::NoValue"}
				  ]
				},
			"ImageId": { "Fn::GetAtt": [ "AMIInfo", "Id" ] },
			"IamInstanceProfile" : {
			"Arn" : {"Fn::GetAtt": ["RootInstanceProfile", "Arn"]}
			},
			"SecurityGroupIds" : { "Ref" : "SecurityGroupId" },
			"TagSpecifications": [
                        {
                            "ResourceType": "instance",
                            "Tags": [
                                {
                                    "Key": "Name",
                                    "Value": "adjoin-worker-instance"
                                }
                            ]
                        }
                    ],
			"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
						"<powershell>\n",
						"mkdir 'C:\\log' \n",
						"mkdir 'C:\\scripts' \n",
						"Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n",
						"choco feature enable -n=allowGlobalConfirmation -y\n",
						"choco install jq python awscli git putty\n",
						"choco install bind-toolsonly\n",
						"Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\n",
						"Install-WindowsFeature RSAT-ADDS\n",
						"cfn-init.exe -v -s ", { "Ref" : "AWS::StackName" },
						" -c InstallAndRun",
						" -r MyLaunchTemplate",
						" --region ", { "Ref" : "AWS::Region" }, "\n",
						"</powershell>"
						]]}}
					  }
				}
		
	},

"workeradautoscalingV1": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "MyLaunchTemplate",
            "Properties": {
				"NotificationConfigurations" : [
						  {
							"TopicARN" : { "Ref" : "NotificationTopic" },
							"NotificationTypes" : [
							  "autoscaling:EC2_INSTANCE_LAUNCH"	  
							]
						} ],	
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "MyLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "MyLaunchTemplate",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": "1"
            }
	},	
	"AdminRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
			    "RoleName" : "AdminEC2Role",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ec2adminpolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "*",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "AdminRole"
                    }
                ]
            }
        },
        "RootInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "AdminRole"
                    }
                ]
            }
        },
		  "mysceretrolepolicy": {
			 "Type": "AWS::IAM::Policy",
			 "Properties": {
				"PolicyName": "mysecretpolicy",
				"PolicyDocument": {
				     "Statement": [
                        {
                            "Effect": "Deny",
							"Resource": "*",
                            "Condition": {
                                "StringNotLike": {
                                        "aws:userid": [
                                            {
                                                "Fn::Join": [
                                                    ":",
                                                    [
                                                        {
                                                            "Fn::GetAtt": [
                                                                "AdminRole",
                                                                "RoleId"
                                                            ]
                                                        },
                                                        {
                                                            "Ref": "Placeholder"
                                                        }
                                                    ]
                                                ]
                                            },
                                            { "Ref": "AdminUserId" },
											{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, "UpdatePoliciesLambdaV2" ] ] }
                                        ]
                                    }
                                },
                            "Action": "*"
                        }
                    ]
				},
				"Roles": [{ "Ref": "AdminRole" }]
			 }
		  },
		  "DENYPOLICY": {
			 "Type": "AWS::IAM::ManagedPolicy",
			 "Properties": {
				"ManagedPolicyName" : { "Ref": "DenyPolicyName" },
				"PolicyDocument": {
				     "Version": "2012-10-17",
				     "Statement": [
                        {
                            "Effect": "Deny",
							"Resource": [ {"Fn::GetAtt" : ["AdminRole", "Arn"] },
							{ "Fn::Sub": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/i-xxxx" },
                            { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/${DenyPolicyName}" }
							],
                            "Condition": {
                                "StringNotLike": {
                                        "aws:userid": [
											{ "Ref": "AdminUserId" },
											{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, "UpdatePoliciesLambdaV2" ] ] }
                                        ]
                                    }
									
                                },
                            "Action": "*"
                        }
                    ]
				},
				"Users" : [ "nologin-user" ]
				
			 }
		  },
    "AMIInfo": {
      "Type": "Custom::AMIInfo",
	  "DependsOn": "IAMLambdaPolicy",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["AMIInfoFunction", "Arn"] },
        "Region": { "Ref": "AWS::Region" },
        "OSName": "Windows Server 2016 English Full-Base 64-bit"
      }
    },
	
    "AMIInfoFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
            "S3Bucket": { "Ref": "S3Bucket" },
            "S3Key": "lambda/amilookup.zip"
        },
        "Handler": "amilookup.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Runtime": "nodejs12.x",
        "Timeout": "30"
      }
    },
    "PushEC2detailtoSQSLambdaV1": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
	    "FunctionName" : "PushEC2detailtoSQSLambdaV1",
        "Code": {
            "S3Bucket": { "Ref": "S3Bucket" },
            "S3Key": "lambda/send-ec2-details-to-sqs.zip"
        },
        "Handler": "send-ec2-details-to-sqs.lambda_handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Runtime": "python3.7",
        "Timeout": "7",
		"Environment": {
		"Variables": {
		  "INSTANCE_TAG_VALUE": "true",
		  "INSTANCE_AD_TAG": "JoinAD",
		  "QUEUE_NAME": { "Fn::GetAtt" : ["MySQSQueue", "QueueName"]}
		  }
	    }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/"
      }
    },
	"IAMLambdaPolicy": {
			 "Type": "AWS::IAM::ManagedPolicy",
			 "DependsOn" : "LambdaExecutionRole",
			 "Properties": {
				"PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
            },
			{
                "Effect": "Deny",
                "Action": "*",
                "Resource": "*",
				"Condition": {
				"StringNotLike": {
						"aws:userid": [
							{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, { "Ref": "UpdatePoliciesLambdaV2" } ] ] },
							{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, { "Ref": "AMIInfoFunction" } ] ] },
							{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, { "Ref": "PushEC2detailtoSQSLambdaV1" } ] ] }
						]
					}
				}
            },
			{
                "Effect": "Allow",
                "Action": ["sqs:*"],
                "Resource": { "Fn::GetAtt" : ["MySQSQueue", "Arn"] }
				
            },
			{
                "Effect": "Allow",
                "Action": ["iam:*", "s3:*", "secretsmanager:*"],
                "Resource": "*"
				
            },
            {
                "Effect": "Allow",
                "Action": ["ec2:DescribeImages", "ec2:DescribeInstances"],
                "Resource": "*"
            }]
          },
				"Roles" : [ { "Ref": "LambdaExecutionRole" } ]
				
			 }
		  },
	"myLogGroup": {
    "Type": "AWS::Logs::LogGroup",
    "Properties": {
        "LogGroupName" : "ad-join-custom-script-log"
  }
  },
  
  "MySQSQueue" : {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
         "QueueName" : "myadqueue"
      }
  },
  
  "MyDLSQSQueue" : {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
         "QueueName" : "mydladqueue"
      }
  },
  
"instancehostnamemappingtable": {
	"Type": "AWS::DynamoDB::Table",
	"Properties": {
		"AttributeDefinitions": [
			{
				"AttributeName": "instanceid",
				"AttributeType": "S"
			}
		],
		"KeySchema": [
			{
				"AttributeName": "instanceid",
				"KeyType": "HASH"
			}
		],
		"ProvisionedThroughput": {
			"ReadCapacityUnits": "5",
			"WriteCapacityUnits": "5"
		},
		"TableName": "instanceid_hostname_mapping"
	}
},

  
  "EventRule": {
  "Type": "AWS::Events::Rule",
  "Properties": {
    "Description": "EventRule",
    "EventPattern": {
      "source": [
        "aws.ec2"
      ],
      "detail-type": [
        "EC2 Instance State-change Notification"
      ],
      "detail": {
        "state": [
          "running",
		  "terminated"
        ]
      }
    },
    "State": "ENABLED",
    "Targets": [{
      "Arn": { "Fn::GetAtt": ["PushEC2detailtoSQSLambdaV1", "Arn"] },
      "Id": "PushEC2detailtoSQSLambdaV1"
    }]
  }
},

"PermissionForEventsToInvokeLambda": {
  "Type": "AWS::Lambda::Permission",
  "Properties": {
    "FunctionName": { "Ref": "PushEC2detailtoSQSLambdaV1" },
    "Action": "lambda:InvokeFunction",
    "Principal": "events.amazonaws.com",
    "SourceArn": { "Fn::GetAtt": ["EventRule", "Arn"] }
  }
},

"SNSLambdaInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdatePoliciesLambdaV2"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "NotificationTopic"
                }
            }
        },

 "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "UpdatePoliciesLambdaV2",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            },
            "DependsOn": "UpdatePoliciesLambdaV2"
        },
	"UpdatePoliciesLambdaV2": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
						"S3Bucket": { "Ref": "S3Bucket" },
						"S3Key": "lambda/update-policies.zip"
						},
				"FunctionName" : "UpdatePoliciesLambdaV2",		
                "Handler": "update-policies.lambda_handler",
                "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
                "Runtime": "python3.7",
				"Environment": {
						"Variables": {
						  "IAM_EC2_ROLE": { "Ref": "AdminRole" } , 
						  "IAM_POLICY": "mysecretpolicy",
						  "SECRET_NAME": { "Ref": "ADSecret" },
						  "MANAGED_POLICY_ARN": { "Ref": "DENYPOLICY" },
                          "S3_BUCKET": { "Ref": "S3Bucket" }						  
						  }
						},
                "Timeout": 15
            }
        },	

  "ADSecret": {
    "Type": "AWS::SecretsManager::Secret",
    "Properties": {
      "Name": "myadcredV1",
      "Description": "This secret has a dynamically generated secret password.",
      "GenerateSecretString": {
        "SecretStringTemplate": "{\"domain_user\":\"admin\",\"domain_name\":\"EXAMPLE.COM\",\"domain_password\":\"dummypass\",\"directory_ou\":\"test\"}",
        "GenerateStringKey": "instance_password",
        "PasswordLength": 15,
        "ExcludeCharacters": "\"@/\\"
      },
      "Tags": [
        {
          "Key": "Name",
          "Value": "secret-adcred"
        }
      ]
    }
  }, 
   "ADSecretResourcePolicy": {
        "Type": "AWS::SecretsManager::ResourcePolicy",
        "Properties": {
            "SecretId": {
                "Ref": "ADSecret"
            },
            "ResourcePolicy": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Resource": "*",
                        "Action": "secretsmanager:*",
                        "Effect": "Deny",
                        "Principal": "*",
						"Condition": {
                                "StringNotLike": {
                                        "aws:userid": [
                                            {
                                                "Fn::Join": [
                                                    ":",
                                                    [
                                                        {
                                                            "Fn::GetAtt": [
                                                                "AdminRole",
                                                                "RoleId"
                                                            ]
                                                        },
                                                        {
                                                            "Ref": "Placeholder"
                                                        }
                                                    ]
                                                ]
                                            },
                                            "AIDAIESJ7OFBN64DZGI5W",
											{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, { "Ref": "UpdatePoliciesLambdaV2" } ] ] },
											{ "Ref": "AdminUserId" }
                                        ]
                                    }
                                }
                    }
                ]
            }
        }
    },
	
 "SecureBucketPolicy" : {
   "Type" : "AWS::S3::BucketPolicy",
   "Properties" : {
    "Bucket" : {"Ref" : "S3Bucket"},
    "PolicyDocument": {
      "Statement":[{
	    "Action":["s3:*"],
	    "Effect":"Deny",
	    "Resource": [
        { "Fn::Sub": "arn:aws:s3:::${S3Bucket}" },{ "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*" }
       ],
	    "Principal":"*",
        "Condition": {
                                "StringNotLike": {
                                        "aws:userid": [
                                            {
                                                "Fn::Join": [
                                                    ":",
                                                    [
                                                        {
                                                            "Fn::GetAtt": [
                                                                "AdminRole",
                                                                "RoleId"
                                                            ]
                                                        },
                                                        {
                                                            "Ref": "Placeholder"
                                                        }
                                                    ]
                                                ]
                                            },
											{ "Ref": "AdminUserId" },
											{ "Fn::Join": [":", [ { "Fn::GetAtt": [ "LambdaExecutionRole", "RoleId" ] }, "UpdatePoliciesLambdaV2" ] ] }
                                        ]
                                    }
                                }
      }]
    }
  }
}            
        
},

  "Outputs" : {
    "AMIID" : {
      "Description": "The Amazon EC2 instance AMI ID.",
      "Value" : { "Fn::GetAtt": [ "AMIInfo", "Id" ] }
    },
	"ADSecret" : {
      "Description": "The name of Secret key to store AD credentials",
      "Value" : { "Ref": "ADSecret" }
    }
  }

}

